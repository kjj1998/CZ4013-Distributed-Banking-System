package functionalities;

import objects.Account;
import objects.Currency;
import objects.Pointer;
import utils.MessageIDGenerator;

import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

import static utils.Constants.*;
import static utils.SocketFunctions.sendRequest;
import static utils.UtilityFunctions.*;


public class ClientInterface {
    public static MessageIDGenerator gen = new MessageIDGenerator(MESSAGE_ID_LENGTH);   // create a new MessageIDGenerator

    /**
     * Function to process account creation
     *
     * @param name              String containing name of the customer
     * @param currency          Enum to represent the currency of the bank account
     * @param password          String to represent password of the bank account
     * @param initialAccBalance String to represent inital account balance
     * @return the bank account number generated by the server
     */
    public static Account createAccount(String name, Currency currency, String password, String initialAccBalance) {

        byte[] accCreationByteArray = ByteBuffer.allocate(BYTE_BLOCK_SIZE_FOR_INT).putInt(ACC_CREATION_CODE).array();

        byte[] nameByteArray = marshall(name);
        byte[] currencyByteArray = marshall(currency.name());
        byte[] passwordByteArray = marshall(password);
        byte[] accBalanceArray = marshall(initialAccBalance);

        byte[] messageIDArray = convertStringToByteArray(gen.nextString());
        byte[] marshall = concatWithCopy(messageIDArray, accCreationByteArray, nameByteArray, currencyByteArray, passwordByteArray, accBalanceArray);
        /*
        for (byte c : marshall) {
            System.out.printf("%02X ", c);      // printing to show the marshalled data on console
        }
        System.out.println();
        */
        byte[] reply = sendRequest(marshall);

        int statusCode  = ByteBuffer.wrap(Arrays.copyOfRange(reply, 0, BYTE_BLOCK_SIZE_FOR_INT)).getInt();
        byte[] info = Arrays.copyOfRange(reply, BYTE_BLOCK_SIZE_FOR_INT, reply.length);
        if (statusCode == OK) {
            Pointer val = new Pointer(0);

            int accNumber = Integer.parseInt(unmarshall(val, info));
            name = unmarshall(val, info);
            currency = Currency.valueOf(unmarshall(val, info));
            double accBalance = Double.parseDouble(unmarshall(val, info));
            Account temp = new Account(name, currency, accBalance, accNumber);
            return temp;
        }

        return null;
        /*
        ByteBuffer choiceBuffer = ByteBuffer.allocate(BUFFER_SIZE);
        choiceBuffer.put(reply);
        choiceBuffer.rewind();
        return choiceBuffer.getInt();
         */
    }

    /**
     * Function to query current account balance
     *
     * @param accNumber the account number of the account to be queried
     * @param password  the password of the account to be queried
     * @return the current balance in the account
     */
    public static double queryAccBalance(String accNumber, String password) {

        byte[] accBalanceQueryByteArray = ByteBuffer.allocate(BYTE_BLOCK_SIZE_FOR_INT).putInt(ACC_BALANCE_CODE).array();

        byte[] accNumberByteArray = marshall(accNumber);
        byte[] passwordByteArray = marshall(password);

        String messageID = gen.nextString();
        System.out.println(messageID);
        byte[] messageIDArray = convertStringToByteArray(messageID);

        byte[] marshall = concatWithCopy(messageIDArray, accBalanceQueryByteArray, accNumberByteArray, passwordByteArray);
        for (byte c : marshall) {
            System.out.printf("%02X ", c);      // printing to show the marshalled data on console
        }
        System.out.println();
        byte[] reply = sendRequest(marshall);

        return ByteBuffer.wrap(reply).getDouble();
    }

    public static String closeAccount(String name, String password, String accNumber) {
        byte[] closeAccByteArray = ByteBuffer.allocate(BYTE_BLOCK_SIZE_FOR_INT).putInt(ACC_CLOSING_CODE).array();

        byte[] nameByteArray = marshall(name);
        byte[] passwordByteArray = marshall(password);
        byte[] accNumberByteArray = marshall(accNumber);

        String messageID = gen.nextString();
        System.out.println(messageID);
        byte[] messageIDArray = convertStringToByteArray(messageID);

        byte[] marshall = concatWithCopy(messageIDArray, closeAccByteArray, accNumberByteArray, nameByteArray, passwordByteArray);
        for (byte c : marshall) {
            System.out.printf("%02X ", c);      // printing to show the marshalled data on console
        }
        System.out.println();
        String reply = new String(sendRequest(marshall), StandardCharsets.UTF_8);

        if (reply.equals(accNumber)) {
            return reply;
        }

        return " ";
    }
}
