package functionalities;

import objects.Account;
import objects.Currency;
import objects.Pointer;
import utils.MessageIDGenerator;

import java.nio.ByteBuffer;

import static utils.Constants.*;
import static utils.SocketFunctions.sendRequest;
import static utils.UtilityFunctions.*;


public class ClientInterface {
    public static MessageIDGenerator gen = new MessageIDGenerator(MESSAGE_ID_LENGTH);   // create a new MessageIDGenerator

    /**
     * Function to process account creation
     *
     * @param name              String containing name of the customer
     * @param currency          Enum to represent the currency of the bank account
     * @param password          String to represent password of the bank account
     * @param initialAccBalance String to represent inital account balance
     * @return the bank account number generated by the server
     */
    public static Account createAccount(String name, Currency currency, String password, String initialAccBalance) {

        byte[] accCreationByteArray = ByteBuffer.allocate(BYTE_BLOCK_SIZE_FOR_INT).putInt(ACC_CREATION_CODE).array();

        byte[] nameByteArray = marshall(name);
        byte[] currencyByteArray = marshall(currency.name());
        byte[] passwordByteArray = marshall(password);
        byte[] accBalanceArray = marshall(initialAccBalance);

        byte[] messageIDArray = convertStringToByteArray(gen.nextString());
        byte[] marshall = concatWithCopy(messageIDArray, accCreationByteArray, nameByteArray, currencyByteArray, passwordByteArray, accBalanceArray);
        /*
        for (byte c : marshall) {
            System.out.printf("%02X ", c);      // printing to show the marshalled data on console
        }
        System.out.println();
        */
        byte[] reply = sendRequest(marshall);

        Pointer val = new Pointer(0);
        String statusCode = new String(unmarshall(val, reply));

        if (statusCode.equals(OK)) {
            int accNumber = Integer.parseInt(unmarshall(val, reply));
            name = unmarshall(val, reply);
            currency = Currency.valueOf(unmarshall(val, reply));
            double accBalance = Double.parseDouble(unmarshall(val, reply));
            Account temp = new Account(name, currency, accBalance, accNumber);
            return temp;
        }

        return null;
    }

    /**
     * Function to query current account balance
     *
     * @param accNumber the account number of the account to be queried
     * @param password  the password of the account to be queried
     * @return the current balance in the account
     */
    public static Account queryAccBalance(String accNumber, String password) throws Exception {

        byte[] accBalanceQueryByteArray = ByteBuffer.allocate(BYTE_BLOCK_SIZE_FOR_INT).putInt(ACC_BALANCE_CODE).array();
        byte[] accNumberByteArray = marshall(accNumber);
        byte[] passwordByteArray = marshall(password);

        byte[] messageIDArray = convertStringToByteArray(gen.nextString());

        byte[] marshall = concatWithCopy(messageIDArray, accBalanceQueryByteArray, accNumberByteArray, passwordByteArray);
        /*
        for (byte c : marshall) {
            System.out.printf("%02X ", c);      // printing to show the marshalled data on console
        }
        System.out.println();*/
        byte[] reply = sendRequest(marshall);

        Pointer pointer = new Pointer(0);
        String statusCode = unmarshall(pointer, reply);

        switch (statusCode) {
            case OK:
                return unmarshallAccount(pointer, reply);
            case NOT_FOUND:
                throw new IllegalArgumentException(NOT_FOUND);
            case UNAUTHORIZED:
                throw new IllegalArgumentException(UNAUTHORIZED);
            default:
                throw new Exception();
        }
    }

    public static Account closeAccount(String name, String password, String accNumber) throws Exception {

        byte[] closeAccByteArray = ByteBuffer.allocate(BYTE_BLOCK_SIZE_FOR_INT).putInt(ACC_CLOSING_CODE).array();
        byte[] nameByteArray = marshall(name);
        byte[] passwordByteArray = marshall(password);
        byte[] accNumberByteArray = marshall(accNumber);

        byte[] messageIDArray = convertStringToByteArray(gen.nextString());

        byte[] marshall = concatWithCopy(messageIDArray, closeAccByteArray, accNumberByteArray, nameByteArray, passwordByteArray);
        /*
        for (byte c : marshall) {
            System.out.printf("%02X ", c);      // printing to show the marshalled data on console
        }
        System.out.println();*/
        byte[] reply = sendRequest(marshall);
        //String reply = new String(sendRequest(marshall), StandardCharsets.UTF_8);
        Pointer pointer = new Pointer(0);
        String statusCode = unmarshall(pointer, reply);

        switch (statusCode) {
            case OK:
                return unmarshallAccount(pointer, reply);
            case NOT_FOUND:
                throw new IllegalArgumentException(NOT_FOUND);
            case UNAUTHORIZED:
                throw new IllegalArgumentException(UNAUTHORIZED);
            default:
                throw new Exception();
        }
    }
}
