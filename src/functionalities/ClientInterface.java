package functionalities;

import objects.Account;
import objects.Currency;
import objects.Pointer;
import utils.MessageIDGenerator;

import java.io.IOException;
import java.nio.ByteBuffer;

import static utils.Constants.*;
import static utils.MarshallFunctions.*;
import static utils.SocketFunctions.sendMonitorRequest;
import static utils.SocketFunctions.sendRequest;
import static utils.UtilityFunctions.concatWithCopy;
import static utils.UtilityFunctions.convertStringToByteArray;


public class ClientInterface {
    public static MessageIDGenerator gen = new MessageIDGenerator(MESSAGE_ID_LENGTH);   // create a new MessageIDGenerator

    /**
     * Function to process account creation
     *
     * @param name              String containing name of the customer
     * @param currency          Enum to represent the currency of the bank account
     * @param password          String to represent password of the bank account
     * @param initialAccBalance String to represent initial account balance
     * @return the bank account number generated by the server
     */
    public static Account createAccount(String name, Currency currency, String password, String initialAccBalance,boolean atLeastOnce) throws Exception {
        byte[] accCreationByteArray = ByteBuffer.allocate(BYTE_BLOCK_SIZE_FOR_INT).putInt(ACC_CREATION_CODE).array();
        byte[] nameByteArray = marshall(name);
        byte[] currencyByteArray = marshall(currency.name());
        byte[] passwordByteArray = marshall(password);
        byte[] accBalanceArray = marshall(initialAccBalance);
        byte[] messageIDArray = convertStringToByteArray(gen.nextString());
        byte[] marshall = concatWithCopy(messageIDArray, accCreationByteArray, nameByteArray, currencyByteArray, passwordByteArray, accBalanceArray);

        byte[] reply = sendRequest(marshall,atLeastOnce); //send atLeastOnce
        if (atLeastOnce){
            while(reply==null){
                reply=sendRequest(marshall, atLeastOnce);
                System.out.println("Resending Message");
            }
        }

        Pointer pointer = new Pointer(0);
        String statusCode = unmarshall(pointer, reply);
        switch (statusCode) {
            case OK:
                return unmarshallAccount(pointer, reply);
            case NOT_FOUND:
                throw new IllegalArgumentException(NOT_FOUND);
            case UNAUTHORIZED:
                throw new IllegalArgumentException(UNAUTHORIZED);
            default:
                throw new Exception();
        }
    }

    /**
     * Function to query current account balance
     *
     * @param accNumber the account number of the account to be queried
     * @param password  the password of the account to be queried
     * @return the current balance in the account
     */
    public static Account queryAccBalance(String accNumber, String password,boolean atLeastOnce)throws Exception {

        byte[] accBalanceQueryByteArray = ByteBuffer.allocate(BYTE_BLOCK_SIZE_FOR_INT).putInt(ACC_BALANCE_CODE).array();
        byte[] accNumberByteArray = marshall(accNumber);
        byte[] passwordByteArray = marshall(password);
        byte[] messageIDArray = convertStringToByteArray(gen.nextString());
        byte[] marshall = concatWithCopy(messageIDArray, accBalanceQueryByteArray, accNumberByteArray, passwordByteArray);

        byte[] reply = sendRequest(marshall,atLeastOnce);
        if (atLeastOnce){
            while(reply==null){
                reply=sendRequest(marshall, atLeastOnce);
                System.out.println("Resending Message");
            }
        }

        Pointer pointer = new Pointer(0);
        String statusCode = unmarshall(pointer, reply);
        switch (statusCode) {
            case OK:
                return unmarshallAccount(pointer, reply);
            case NOT_FOUND:
                throw new IllegalArgumentException(NOT_FOUND);
            case UNAUTHORIZED:
                throw new IllegalArgumentException(UNAUTHORIZED);
            default:
                throw new Exception();
        }
    }

    public static Account closeAccount(String name, String password, String accNumber,boolean atLeastOnce)throws Exception {

        byte[] closeAccByteArray = ByteBuffer.allocate(BYTE_BLOCK_SIZE_FOR_INT).putInt(ACC_CLOSING_CODE).array();
        byte[] nameByteArray = marshall(name);
        byte[] passwordByteArray = marshall(password);
        byte[] accNumberByteArray = marshall(accNumber);
        byte[] messageIDArray = convertStringToByteArray(gen.nextString());
        byte[] marshall = concatWithCopy(messageIDArray, closeAccByteArray, accNumberByteArray, nameByteArray, passwordByteArray);

        byte[] reply = sendRequest(marshall,atLeastOnce);
        if (atLeastOnce){
            while(reply==null){
                reply=sendRequest(marshall, atLeastOnce);
                System.out.println("Resending Message");
            }
        }

        Pointer pointer = new Pointer(0);
        String statusCode = unmarshall(pointer, reply);
        switch (statusCode) {
            case OK:
                return unmarshallAccount(pointer, reply);
            case NOT_FOUND:
                throw new IllegalArgumentException(NOT_FOUND);
            case UNAUTHORIZED:
                throw new IllegalArgumentException(UNAUTHORIZED);
            default:
                throw new Exception();}
    }

    public static Account depositMoney(String name, String accNumber,String password,Currency currency, double deposit,boolean atLeastOnce) throws Exception {
        byte[] depositMoneyByteArray = ByteBuffer.allocate(BYTE_BLOCK_SIZE_FOR_INT).putInt(DEPOSIT_MONEY_CODE).array();
        byte[] nameByteArray = marshall(name);
        byte[] accNumberByteArray = marshall(accNumber);
        byte[] passwordByteArray = marshall(password);
        byte[] currencyByteArray = marshall(currency.name());
        byte[] depositByteArray = marshall(String.valueOf(deposit));
        byte[] messageIDArray = convertStringToByteArray(gen.nextString());
        byte[] marshall = concatWithCopy(messageIDArray, depositMoneyByteArray, nameByteArray, accNumberByteArray, passwordByteArray,currencyByteArray,depositByteArray);

        byte[] reply = sendRequest(marshall,atLeastOnce);
        if (atLeastOnce){
            while(reply==null){
                reply=sendRequest(marshall, atLeastOnce);
                System.out.println("Resending Message");
            }
        }
        Pointer pointer = new Pointer(0);
        String statusCode = unmarshall(pointer, reply);
        switch (statusCode) {
            case OK:
                return unmarshallAccount(pointer, reply);
            case NOT_FOUND:
                throw new IllegalArgumentException(NOT_FOUND);
            case UNAUTHORIZED:
                throw new IllegalArgumentException(UNAUTHORIZED);
            default:
                throw new Exception();}
    }
    public static Account withdrawMoney(String name, String accNumber,String password,Currency currency, double withdraw,boolean atLeastOnce)throws Exception {
        byte[] withdrawMoneyByteArray = ByteBuffer.allocate(BYTE_BLOCK_SIZE_FOR_INT).putInt(WITHDRAW_MONEY_CODE).array();
        byte[] nameByteArray = marshall(name);
        byte[] accNumberByteArray = marshall(accNumber);
        byte[] passwordByteArray = marshall(password);
        byte[] currencyByteArray = marshall(currency.name());
        byte[] withdrawByteArray = marshall(String.valueOf(withdraw));
        byte[] messageIDArray = convertStringToByteArray(gen.nextString());
        byte[] marshall = concatWithCopy(messageIDArray, withdrawMoneyByteArray, nameByteArray, accNumberByteArray, passwordByteArray,currencyByteArray,withdrawByteArray);

        byte[] reply = sendRequest(marshall,atLeastOnce);
        if (atLeastOnce){
            while(reply==null){
                reply=sendRequest(marshall, atLeastOnce);
                System.out.println("Resending Message");
            }
        }
        Pointer pointer = new Pointer(0);
        String statusCode = unmarshall(pointer, reply);
        switch (statusCode) {
            case OK:
                return unmarshallAccount(pointer, reply);
            case NOT_FOUND:
                throw new IllegalArgumentException(NOT_FOUND);
            case UNAUTHORIZED:
                throw new IllegalArgumentException(UNAUTHORIZED);
            default:
                throw new Exception();}
    }

    public static Account transferMoney(String name, String accNumber,String password,String toAccNumber,Currency currency, double transfer,boolean atLeastOnce)throws Exception {

        byte[] transferMoneyByteArray = ByteBuffer.allocate(BYTE_BLOCK_SIZE_FOR_INT).putInt(TRANSFER_MONEY_CODE).array();
        byte[] nameByteArray = marshall(name);
        byte[] accNumberByteArray = marshall(accNumber);
        byte[] passwordByteArray = marshall(password);
        byte[] toAccNumberByteArray = marshall(toAccNumber);
        byte[] currencyByteArray = marshall(currency.name());
        byte[] transferByteArray = marshall(String.valueOf(transfer));
        byte[] messageIDArray = convertStringToByteArray(gen.nextString());
        byte[] marshall = concatWithCopy(messageIDArray, transferMoneyByteArray, nameByteArray, accNumberByteArray, passwordByteArray,toAccNumberByteArray,currencyByteArray,transferByteArray);

        byte[] reply = sendRequest(marshall,atLeastOnce);
        if (atLeastOnce){
            while(reply==null){
                reply=sendRequest(marshall, atLeastOnce);
                System.out.println("Resending Message");
            }
        }
        Pointer pointer = new Pointer(0);
        String statusCode = unmarshall(pointer, reply);
        switch (statusCode) {
            case OK:
                return unmarshallAccount(pointer, reply);
            case NOT_FOUND:
                throw new IllegalArgumentException(NOT_FOUND);
            case UNAUTHORIZED:
                throw new IllegalArgumentException(UNAUTHORIZED);
            default:
                throw new Exception();}
    }

    public static void monitorUpdates(int duration, boolean atLeastOnce) throws IOException {
        byte[] startMonitorUpdatesByteArray = ByteBuffer.allocate(BYTE_BLOCK_SIZE_FOR_INT).putInt(ADD_OBSERVERS_FOR_MONITORING_CODE).array();
        byte[] startMessageIDArray = convertStringToByteArray(gen.nextString());
        byte[] startMonitoringMarshall = concatWithCopy(startMessageIDArray, startMonitorUpdatesByteArray);

        byte[] endMonitorUpdatesByteArray = ByteBuffer.allocate(BYTE_BLOCK_SIZE_FOR_INT).putInt(REMOVE_OBSERVERS_FROM_MONITORING_CODE).array();
        byte[] endMessageIDArray = convertStringToByteArray(gen.nextString());
        byte[] endMonitoringMarshall = concatWithCopy(endMessageIDArray, endMonitorUpdatesByteArray);

        sendMonitorRequest(startMonitoringMarshall, endMonitoringMarshall, atLeastOnce, duration);
        System.out.println("Monitoring ended");
    }
}
