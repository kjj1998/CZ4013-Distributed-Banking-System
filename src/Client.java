import java.lang.reflect.Array;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.nio.ByteBuffer;

public class Client {
    public static void main(String[] args) {

        int bankAcc = createAccount("John Smith", Currency.NZD, "P@ssword", "1000.00");
        System.out.println("Acc number: " + bankAcc);
    }

    public enum Currency {
        NZD,
        SGD,
        USD
    }

    /**
     * Function to process account creation
     *
     * @param name              String containing name of the customer
     * @param currency          Enum to represent the currency of the bank account
     * @param password          String to represent password of the bank account
     * @param initialAccBalance String to represent inital account balance
     * @return the bank account number generated by the server
     */
    public static int createAccount(String name, Currency currency, String password, String initialAccBalance) {
        int nameLength = name.length();
        int currencyLength = currency.toString().length();
        int accBalanceLength = initialAccBalance.length();
        int passwordLength = password.length();

        byte[] accCreationByteArray = ByteBuffer.allocate(4).putInt(1).array();
        byte[] nameLengthByteArray = ByteBuffer.allocate(4).putInt(nameLength).array();
        byte[] nameByteArray = convertStringToByteArray(name);
        byte[] currencyLengthByteArray = ByteBuffer.allocate(4).putInt(currencyLength).array();
        byte[] currencyByteArray = convertStringToByteArray(currency.toString());
        byte[] passwordLengthByteArray = ByteBuffer.allocate(4).putInt(passwordLength).array();
        byte[] passwordByteArray = convertStringToByteArray(password);
        byte[] accBalanceLengthByteArray = ByteBuffer.allocate(4).putInt(accBalanceLength).array();
        byte[] accBalanceArray = convertStringToByteArray(initialAccBalance);


        byte[] marshall = concatWithCopy(accCreationByteArray, nameLengthByteArray, nameByteArray, currencyLengthByteArray, currencyByteArray, passwordLengthByteArray, passwordByteArray, accBalanceLengthByteArray, accBalanceArray);
        for (byte c : marshall) {
            System.out.printf("%02X ", c);      // printing to show the marshalled data on console:w
        }
        System.out.println();
        byte[] reply = sendRequest(marshall);

        ByteBuffer choiceBuffer = ByteBuffer.allocate(1000);
        choiceBuffer.put(reply);
        choiceBuffer.rewind();
        return choiceBuffer.getInt();
    }

    /**
     * Function to send data in the form of a byte array to the server for processing
     *
     * @param marshall the byte array to be sent over
     * @return the reply message from the server
     */
    private static byte[] sendRequest(byte[] marshall) {
        try (DatagramSocket aSocket = new DatagramSocket()) {
            InetAddress aHost = InetAddress.getByName("localhost");     // translate user-specified hostname to Internet address
            int serverPort = 6789;                                      // a port number to construct a packet

            DatagramPacket request = new DatagramPacket(marshall, marshall.length, aHost, serverPort);
            aSocket.send(request);

            byte[] buffer = new byte[1000];     // a buffer for receive
            DatagramPacket reply = new DatagramPacket(buffer, buffer.length);
            aSocket.receive(reply);

            return reply.getData();
        } catch (Exception e) {
            System.out.println();
        }
        return null;
    }

    /**
     * Function to concatenate byte arrays
     *
     * @param arrays The byte arrays to be concatenated
     * @return the concatenated byte array
     */
    private static byte[] concatWithCopy(byte[]... arrays) {

        Class<?> compType1 = arrays[0].getClass().getComponentType();
        int totalLength = 0;

        for (byte[] array : arrays) {
            for (int j = 0; j < array.length; j++)
                totalLength++;
        }
        byte[] result = (byte[]) Array.newInstance(compType1, totalLength);

        int startingPosition = 0;
        for (byte[] array : arrays) {
            System.arraycopy(array, 0, result, startingPosition, array.length);
            startingPosition += array.length;
        }

        return result;
    }

    /**
     * Convert a String into a byte array whose size is a multiple of 4
     * If length of String is not a multiple of 4, '_' (ASCII code 95) is added as padding to make up the numbers
     *
     * @param str the String to be converted into byte array
     * @return the converted byte array
     */
    private static byte[] convertStringToByteArray(String str) {
        byte[] array = str.getBytes();
        if (array.length % 4 != 0) {
            int extra = 4 - (array.length % 4);
            byte[] newArray = new byte[array.length + extra];

            for (int i = 0; i < newArray.length; i++) {
                if (i < array.length) {
                    newArray[i] = array[i];
                } else {
                    newArray[i] = 95;
                }
            }
            return newArray;
        }
        return array;
    }
}
